{"version":3,"sources":["components/Formulario.js","components/Reserva.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearReserva","useState","destino","fechaEntrada","fechaSalida","adultos","niños","reserva","actualizarReserva","error","actualizarError","actualizarState","e","target","name","value","today","Date","getTime","getTimezoneOffset","toISOString","split","data-testid","className","onSubmit","preventDefault","trim","id","uuid","console","log","action","htmlFor","type","placeholder","onChange","min","Row","Col","Reserva","eliminarReserva","onClick","App","ReservasIniciales","JSON","parse","localStorage","getItem","reservas","guardarReservas","useEffect","setItem","stringify","nuevasReservas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b46c363b.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { uuid } from \"uuidv4\";\nimport PropTypes from \"prop-types\";\nimport { Row, Col } from \"react-bootstrap\";\n\nexport const Formulario = ({ crearReserva }) => {\n  // Crear State de Reservas\n  const [reserva, actualizarReserva] = useState({\n    destino: \"\",\n    fechaEntrada: \"\",\n    fechaSalida: \"\",\n    adultos: 1,\n    niños: 0,\n  });\n\n  const [error, actualizarError] = useState(false);\n\n  //   Función que se ejecuta cada vez que el usuario escribe en el input\n  const actualizarState = (e) =>\n    actualizarReserva({\n      ...reserva,\n      [e.target.name]: e.target.value,\n    });\n\n  // Extraer valores\n  const { destino, fechaEntrada, fechaSalida, adultos, niños } = reserva;\n\n  // Encontrar el dia de hoy\n  const today = new Date(\n    new Date().getTime() - new Date().getTimezoneOffset() * 60000\n  )\n    .toISOString()\n    .split(\"T\")[0];\n\n  //Cuando el usuario presiona agregar Reserva\n  const submitReserva = (e) => {\n    e.preventDefault();\n\n    //   Validar\n    if (\n      destino.trim() === \"\" ||\n      fechaEntrada.trim() === \"\" ||\n      fechaSalida.trim() === \"\"\n    ) {\n      actualizarError(true);\n      return;\n    }\n\n    // Eliminarel mensaje previo\n    actualizarError(false);\n\n    //   Asignar iD\n    reserva.id = uuid();\n    console.log(reserva);\n\n    // Crear Reserva\n    crearReserva(reserva);\n\n    // Reiniciar el form\n    actualizarReserva({\n      destino: \"\",\n      fechaEntrada: \"\",\n      fechaSalida: \"\",\n      adultos: 1,\n      niños: 0,\n    });\n  };\n\n  return (\n    <Fragment>\n      <h2 data-testid=\"titulo\">Crear reserva</h2>\n      {error ? (\n        <p data-testid=\"alerta\" className=\"alerta-error\">\n          Todos los campos son obligatorios\n        </p>\n      ) : null}\n      <form onSubmit={submitReserva} action=\"\">\n        <label htmlFor=\"\">Destino de tu viaje</label>\n        <input\n          data-testid=\"destino\"\n          type=\"text\"\n          name=\"destino\"\n          className=\"u-full-width\"\n          placeholder=\"¿A dónde vas?\"\n          onChange={actualizarState}\n          value={destino}\n        />\n        <label htmlFor=\"\">Fecha Entrada</label>\n        <input\n          data-testid=\"fechaEntrada\"\n          type=\"date\"\n          name=\"fechaEntrada\"\n          min={today}\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={fechaEntrada}\n        />\n        <label htmlFor=\"\">Fecha Salida</label>\n        <input\n          data-testid=\"fechaSalida\"\n          type=\"date\"\n          name=\"fechaSalida\"\n          min={fechaEntrada}\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={fechaSalida}\n        />\n        <Row>\n          <Col>\n            <label htmlFor=\"\">Adultos</label>\n            <input\n              data-testid=\"adultos\"\n              type=\"number\"\n              name=\"adultos\"\n              min=\"1\"\n              className=\"u-full-width\"\n              onChange={actualizarState}\n              value={adultos}\n            />\n          </Col>\n          <Col>\n            <label htmlFor=\"\">Niños</label>\n            <input\n              data-testid=\"niños\"\n              type=\"number\"\n              name=\"niños\"\n              min=\"0\"\n              className=\"u-full-width\"\n              onChange={actualizarState}\n              value={niños}\n            />\n          </Col>\n        </Row>\n\n        <button\n          data-testid=\"btn-submit\"\n          type=\"submit\"\n          className=\"u-full-width button-primary\"\n        >\n          Agregar Reserva\n        </button>\n      </form>\n    </Fragment>\n  );\n};\n\nFormulario.propTypes = {\n  crearReserva: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const Reserva = ({ reserva, eliminarReserva }) => (\n  <div data-testid=\"reserva\" className=\"cita\">\n    <p>\n      Destino: <span>{reserva.destino}</span>\n    </p>\n    <p>\n      Fecha Entrada: <span>{reserva.fechaEntrada}</span>\n    </p>\n    <p>\n      Fecha Salida: <span>{reserva.fechaSalida}</span>\n    </p>\n    <p>\n      Adultos: <span>{reserva.adultos}</span>\n    </p>\n    <p>\n      Niños: <span>{reserva.niños}</span>\n    </p>\n    <button\n      data-testid=\"btn-eliminar\"\n      className=\"button eliminar u-full-width\"\n      onClick={() => eliminarReserva(reserva.id)}\n    >\n      Eliminar &times;\n    </button>\n  </div>\n);\n\nReserva.propTypes = {\n  reserva: PropTypes.object.isRequired,\n  eliminarReserva: PropTypes.func.isRequired,\n};\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { Formulario } from \"./components/Formulario\";\nimport { Reserva } from \"./components/Reserva\";\n\nfunction App() {\n  // reservas en el localStorage\n  let ReservasIniciales = JSON.parse(localStorage.getItem(\"reservas\"));\n  if (!ReservasIniciales) {\n    ReservasIniciales = [];\n  }\n  //  Arreglo de reservas\n  const [reservas, guardarReservas] = useState(ReservasIniciales);\n\n  //  UseEffect para realizar ciertas operaciones cuando el satte cambia\n  useEffect(() => {\n    if (ReservasIniciales) {\n      localStorage.setItem(\"reservas\", JSON.stringify(reservas));\n    } else {\n      localStorage.setItem(\"reservas\", JSON.stringify([]));\n    }\n  }, [reservas, ReservasIniciales]);\n\n  // Función que tome las reservas actuales y agregue la nueva\n  const crearReserva = (reserva) => {\n    guardarReservas([...reservas, reserva]);\n  };\n\n  // Función que elimina una cita por su id\n  const eliminarReserva = (id) => {\n    const nuevasReservas = reservas.filter((reserva) => reserva.id !== id);\n    guardarReservas(nuevasReservas);\n  };\n\n  // Mensaje condicional\n  const titulo =\n    reservas.length === 0 ? \"No hay reservas\" : \"Administra tus reservas\";\n\n  const punto = \".\";\n  return (\n    <Fragment>\n      <h1 data-testid=\"nombre-app\">Administrador de Reserva Hotel</h1>;\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"five columns\">\n            <Formulario crearReserva={crearReserva} />\n          </div>\n          <div className=\"two columns\">{punto}</div>\n          <div className=\"five columns\">\n            <h2 data-testid=\"titulo-dinamico\">{titulo}</h2>\n            {reservas.map((reserva) => (\n              <Reserva\n                key={reserva.id}\n                reserva={reserva}\n                eliminarReserva={eliminarReserva}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}